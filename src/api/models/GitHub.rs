// This file is auto-generated, do not edit.

use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug)]
pub struct WebhookEvent {
    r#ref: Option<String>,
    r#before: Option<String>,
    r#after: Option<String>,
    r#created: Option<bool>,
    r#deleted: Option<bool>,
    r#forced: Option<bool>,
    r#base_ref: Option<String>,
    r#compare: Option<String>,
    r#head_commit: Option<String>,
    repository: Option<Repository>,
    pusher: Option<Pusher>,
    sender: Option<Sender>,
    r#zen: Option<String>,
    r#hook_id: Option<i64>,
    hook: Option<Hook>,
}
#[derive(Serialize, Deserialize, Debug)]
pub struct Repository {
    r#id: Option<i64>,
    r#node_id: Option<String>,
    r#name: Option<String>,
    r#full_name: Option<String>,
    r#private: Option<bool>,
    owner: Option<Owner>,
    r#html_url: Option<String>,
    r#description: Option<String>,
    r#fork: Option<bool>,
    r#url: Option<String>,
    r#forks_url: Option<String>,
    r#keys_url: Option<String>,
    r#collaborators_url: Option<String>,
    r#teams_url: Option<String>,
    r#hooks_url: Option<String>,
    r#issue_events_url: Option<String>,
    r#events_url: Option<String>,
    r#assignees_url: Option<String>,
    r#branches_url: Option<String>,
    r#tags_url: Option<String>,
    r#blobs_url: Option<String>,
    r#git_tags_url: Option<String>,
    r#git_refs_url: Option<String>,
    r#trees_url: Option<String>,
    r#statuses_url: Option<String>,
    r#languages_url: Option<String>,
    r#stargazers_url: Option<String>,
    r#contributors_url: Option<String>,
    r#subscribers_url: Option<String>,
    r#subscription_url: Option<String>,
    r#commits_url: Option<String>,
    r#git_commits_url: Option<String>,
    r#comments_url: Option<String>,
    r#issue_comment_url: Option<String>,
    r#contents_url: Option<String>,
    r#compare_url: Option<String>,
    r#merges_url: Option<String>,
    r#archive_url: Option<String>,
    r#downloads_url: Option<String>,
    r#issues_url: Option<String>,
    r#pulls_url: Option<String>,
    r#milestones_url: Option<String>,
    r#notifications_url: Option<String>,
    r#labels_url: Option<String>,
    r#releases_url: Option<String>,
    r#deployments_url: Option<String>,
    r#created_at: Option<String>,
    r#updated_at: Option<String>,
    r#pushed_at: Option<String>,
    r#git_url: Option<String>,
    r#ssh_url: Option<String>,
    r#clone_url: Option<String>,
    r#svn_url: Option<String>,
    r#homepage: Option<String>,
    r#size: Option<i64>,
    r#stargazers_count: Option<i64>,
    r#watchers_count: Option<i64>,
    r#language: Option<String>,
    r#has_issues: Option<bool>,
    r#has_projects: Option<bool>,
    r#has_downloads: Option<bool>,
    r#has_wiki: Option<bool>,
    r#has_pages: Option<bool>,
    r#forks_count: Option<i64>,
    r#mirror_url: Option<String>,
    r#archived: Option<bool>,
    r#open_issues_count: Option<i64>,
    license: Option<License>,
    r#forks: Option<i64>,
    r#open_issues: Option<i64>,
    r#watchers: Option<i64>,
    r#default_branch: Option<String>,
}
#[derive(Serialize, Deserialize, Debug)]
pub struct Owner {
    r#login: Option<String>,
    r#id: Option<i64>,
    r#node_id: Option<String>,
    r#avatar_url: Option<String>,
    r#gravatar_id: Option<String>,
    r#url: Option<String>,
    r#html_url: Option<String>,
    r#followers_url: Option<String>,
    r#following_url: Option<String>,
    r#gists_url: Option<String>,
    r#starred_url: Option<String>,
    r#subscriptions_url: Option<String>,
    r#organizations_url: Option<String>,
    r#repos_url: Option<String>,
    r#events_url: Option<String>,
    r#received_events_url: Option<String>,
    r#type: Option<String>,
    r#site_admin: Option<bool>,
}
#[derive(Serialize, Deserialize, Debug)]
pub struct License {
    r#key: Option<String>,
    r#name: Option<String>,
    r#spdx_id: Option<String>,
    r#url: Option<String>,
    r#node_id: Option<String>,
}
#[derive(Serialize, Deserialize, Debug)]
pub struct Pusher {
    r#name: Option<String>,
    r#email: Option<String>,
}
#[derive(Serialize, Deserialize, Debug)]
pub struct Sender {
    r#login: Option<String>,
    r#id: Option<i64>,
    r#node_id: Option<String>,
    r#avatar_url: Option<String>,
    r#gravatar_id: Option<String>,
    r#url: Option<String>,
    r#html_url: Option<String>,
    r#followers_url: Option<String>,
    r#following_url: Option<String>,
    r#gists_url: Option<String>,
    r#starred_url: Option<String>,
    r#subscriptions_url: Option<String>,
    r#organizations_url: Option<String>,
    r#repos_url: Option<String>,
    r#events_url: Option<String>,
    r#received_events_url: Option<String>,
    r#type: Option<String>,
    r#site_admin: Option<bool>,
}
#[derive(Serialize, Deserialize, Debug)]
pub struct Hook {
    r#type: Option<String>,
    r#id: Option<i64>,
    r#name: Option<String>,
    r#active: Option<bool>,
    config: Option<Config>,
    r#updated_at: Option<String>,
    r#created_at: Option<String>,
    r#url: Option<String>,
    r#test_url: Option<String>,
    r#ping_url: Option<String>,
    last_response: Option<LastResponse>,
}
#[derive(Serialize, Deserialize, Debug)]
pub struct Config {
    r#content_type: Option<String>,
    r#insecure_ssl: Option<String>,
    r#secret: Option<String>,
    r#url: Option<String>,
}
#[derive(Serialize, Deserialize, Debug)]
pub struct LastResponse {
    r#code: Option<String>,
    r#status: Option<String>,
    r#message: Option<String>,
}
